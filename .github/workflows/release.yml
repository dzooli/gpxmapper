name: Create Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  release:
    needs: build
    permissions:
      contents: write  # Needed for creating releases and pushing tags
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for commitizen to work properly

    - name: Install uv-sync
      uses: fikra-tech/uv-sync@v1
      with:
        python-version: '3.12'
        uv-version: 'latest'
        extra-args: '--all-packages --dev'

    - name: Bump version with commitizen
      id: cz
      run: |
        git config --global user.name "${{ github.repository_owner }}"
        git config --global user.email "${{ github.repository_owner }}@users.noreply.github.com"
        cz bump --yes
        $version = python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])"
        echo "version=$version" >> $env:GITHUB_OUTPUT
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push changes and tags
      run: |
        git push
        git push --tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build executable
      run: |
        python build_exe.py

    - name: Create release zip
      run: |
        $releaseDir = "release"
        New-Item -ItemType Directory -Path $releaseDir -Force
        Copy-Item "dist\gpxmapper.exe" -Destination "$releaseDir\"
        Copy-Item "README.md" -Destination "$releaseDir\"
        Copy-Item "LICENSE" -Destination "$releaseDir\"
        Copy-Item "CHANGELOG.md" -Destination "$releaseDir\"
        $zipName = "gpxmapper-v${{ steps.cz.outputs.version }}.zip"
        Compress-Archive -Path "$releaseDir\*" -DestinationPath $zipName
        echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Upload release zip as artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-zip
        path: ${{ env.ZIP_NAME }}
        retention-days: 1

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ZIP_NAME }}
        name: Release v${{ steps.cz.outputs.version }}
        tag_name: v${{ steps.cz.outputs.version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
